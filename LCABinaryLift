static class LCABinaryLift {
		static int log;
		static int up[][];
		static int depth[];
		static int time;
		static int enter[];
		static int size[];
        public LCABinaryLift(int n, ArrayList<ArrayList<Integer>>al, int par) {
        	log=0;
        	time=0;
        	enter=new int[n];
        	size=new int[n];
        	depth=new int[n];
        	while((1<<log)<=n) {
        		log++;
        	}
        	up=new int[n][log];
        	dfs(par, -1, al);
        }
        public static void dfs(int cur, int par, ArrayList<ArrayList<Integer>>al){
    	    enter[cur] = time++;
    	    size[cur]=1;
    	    if(par!=-1) {
    	    	up[cur][0]=par;
    	    }
    	    for (int i=1;i<log;i++) {
    	    	/*if(par!=-1) {
    	    		depth[i]=depth[par]+1;
    	    	}*/
    	        up[cur][i]=up[up[cur][i-1]][i-1];
    	    }
    	    for (int next:al.get(cur)) {
    	        if (next!=par) {
    	        	depth[next]=depth[cur]+1;
    	            dfs(next, cur, al);
    	            size[cur]+=size[next];
    	        }
    	    }
    	}
        public int getKthAncestor(int cur, int k) {
        	if(depth[cur]<k) {
        		return -1;
        	}
        	for(int j=log-1;j>=0;j--) {
        		if(k>=(1<<j)) {
        			k-=(1<<j);
        			cur=up[cur][j];
        		}
        	}
        	return cur;
        }
        boolean is_ancestor(int u, int v){
            return enter[u] <= enter[v] && enter[u]+size[u] >= enter[v]+size[v];
        }
        int lca(int u, int v){
            if (is_ancestor(u, v)) {
                return u;
            }
            if (is_ancestor(v, u)) {
            	return v;
            }
            for(int i=log-1;i>=0;i--){
                if (!is_ancestor(up[u][i], v)){
                    u=up[u][i];
                }
            }
            return up[u][0];
        }
    }
