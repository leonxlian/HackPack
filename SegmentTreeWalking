static class SegTree{
		int size;
		long tree[];
		long[] lazy;
		public SegTree(int n) {
			size=1;
			while(size<n) {
				size*=2;
			}
			lazy=new long[2*size];
			tree=new long[2*size];
		}
		public void build(int a[]) {
			for(int i=0;i<a.length;i++) {
				tree[size+i]=a[i];
			}
			for(int i=size-1;i>=1;i--) {
				tree[i]=tree[2*i]+tree[2*i+1];
			}
		}
		public long sum(int node, int node_low, int node_high, int query_low, int query_high) {
			if(query_low<=node_low&&node_high<=query_high) {
				return tree[node];
			}
			if(query_high<node_low||query_low>node_high) {
				return 0;
			}
			push(node, node_low, node_high);
			tree[node]=tree[2*node]+tree[2*node+1];
			int last_in_left=(node_low+node_high)/2;
			return sum(2*node, node_low, last_in_left, query_low, query_high)
					+sum(2*node+1, last_in_left+1, node_high, query_low, query_high);
		}
		//change
		public void setRecur(int node, int node_low, int node_high, int query_low, int query_high, int v) {
			if(query_low<=node_low&&node_high<=query_high) {
				tree[node]=v;
				return;
			}
			if(query_high<node_low||query_low>node_high) {
				return;
			}
			int last_in_left=(node_low+node_high)/2;
			setRecur(2*node, node_low, last_in_left, query_low, query_high, v);
			setRecur(2*node+1, last_in_left+1, node_high, query_low, query_high, v);
			tree[node]=tree[2*node]+tree[2*node+1];
		}
		public void push(int node, int node_low, int node_high) {
			if(lazy[node]>0) {
				int last_in_left=(node_low+node_high)/2;
				increment(2*node, node_low, last_in_left, node_low, node_high, lazy[node]);
				increment(2*node+1, last_in_left+1, node_high, node_low, node_high, lazy[node]);
			}
			lazy[node]=0;
		}
		public void increment(int node, int node_low, int node_high, int query_low, int query_high, long amount) {
			if(query_low<=node_low&&node_high<=query_high) {
				tree[node]+=amount*(node_high-node_low+1);
				lazy[node]+=amount;
				return;
			}
			if(query_low>node_high||node_low>query_high) {
				return;
			}
			push(node, node_low, node_high);
			int last_in_left=(node_low+node_high)/2;
			increment(2*node, node_low, last_in_left, query_low, query_high, amount);
			increment(2*node+1, last_in_left+1, node_high, query_low, query_high, amount);
			tree[node]=tree[2*node]+tree[2*node+1];
		}
		//min x such that prefix sum is at least it
		public int findMinX(long k) {
			long totalsum = sum(1, 0, size-1, 0, size-1);
		    if (totalsum < k) {
		        return -1;
		    }
		    return findMinX(1, 0, size - 1, k);
		}
		public int findMinX(int node, int node_low, int node_high, long k) {
		    if (node_low == node_high) {
		        return node_low;
		    }
		    push(node, node_low, node_high);
		    int mid = (node_low + node_high) / 2;
		    if (tree[2 * node] >= k) {
		        return findMinX(2 * node, node_low, mid, k);
		    } else {
		        return findMinX(2 * node + 1, mid + 1, node_high, k - tree[2 * node]);
		    }
		}
		//max x such that suffix sum is at least it
		public int findMaxX(long k) {
	        if (sum(1, 0, size - 1, 0, size - 1) < k) {
	            return -1;
	        }
	        return findMaxX(1, 0, size - 1, k);
	    }
	    public int findMaxX(int node, int node_low, int node_high, long k) {
	        if (node_low == node_high) {
	            return node_low;
	        }
	        push(node, node_low, node_high);
	        int mid = (node_low + node_high) / 2;
	        if (tree[2 * node + 1] >= k) {
	            return findMaxX(2 * node + 1, mid + 1, node_high, k);
	        } else {
	            return findMaxX(2 * node, node_low, mid, k - tree[2 * node + 1]);
	        }
	    }
	}
